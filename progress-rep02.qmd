---
title: "PGC Internship 2024: R Team - 2nd Progress Report"
author: "[Mentor] Mark Joseph Garrovillas, RCh, Tyrone Mariano, Leda Celeste Samin"
date: last-modified
institution: "Core Facility for Bioinformatics"
format: 
  revealjs:
    date-format: long
    slide-number: c/t
    width: 1920
    height: 1080
    theme: custom.scss
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    preview-links: auto
    slide-level: 3
    multiplex: true
    chalkboard: 
      boardmarker-width: 5
    search:
    transition: slide
    background-transition: fade
    transition-speed: slow
title-slide-attributes:
      data-background: ResearchTopics_files/img/title-slide.png
      data-background-size: cover
      data-background-color: "#000"
      transition: slide
      background-transition: fade
      transition-speed: slow
---

# PROJECT RECAP {data-background="ResearchTopics_files/img/topic-slide.png" transition="fade-in slide-out" transition-speed="slow"}

## R has achieved a prominent role in statistics, <br> bioinformatics, and data science in general {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
:::

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="1" fig-align="center" height="100%" width="100%"}
:::

::: {.column width="50%"}
::: {.fragment fragment-index="2"}
:::

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="60%" width="60%"}
:::
:::

## Bioconductor is the next biggest R repository after the <br> primary repository CRAN {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
One of the keys to R's success as a software environment for data analysis is the availability of user-contributed packages

-   The main CRAN repository cover common data analysis tasks, such as importing data and plotting, through to more specialized tasks, such as packages for parsing data from the web, analyzing financial time series data, or analyzing data from clinical trials

-   The next biggest R repository, Bioconductor is an open source, open development software project that focuses on providing tools for the analysis of high-throughput genomic data, (bioinformatics or computational biology) such as sequencing the DNA of human genomes or measuring the level of expression of genes in hundreds of tumors
:::
:::

::: {.column width="50%"}
::: {.fragment fragment-index="2"}
:::

::: r-stack
![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="100%" width="100%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="3" fig-align="center" height="100%" width="100%"}
:::
:::
:::

## There is a need for standalone servers {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
-   R and Python developers typically choose a standalone server to move beyond the memory and processing constraints of desktop versions of R and Python

-   R and Python libraries executing on a standalone server can load and process large amounts of data on multiple cores and aggregate the results into a single consolidated output

-   A separation of concerns can be implemented, with the data scientist focusing on specific application/computing code while the (web) developer can focus on the front-end and back-end implementation
:::
:::

::: {.column width="50%"}
::: {.fragment fragment-index="2"}
:::

::: r-stack
![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="80%" width="80%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="3" fig-align="center" height="200%" width="200%"}
:::
:::
:::

## A client-server model divides tasks between servers and clients {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
In a client server model:

-   servers provides resources or services
-   clients requests the resources or services
:::

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="100%" width="100%"}
:::

::: {.column width="50%"}
::: {.fragment fragment-index="3"}
This model facilitates:

-   Resource Sharing: Servers consolidate resources (like databases, files, or processing power) for efficiency and control.
-   Flexible Clients: Clients can be diverse (web browsers, mobile apps, IoT devices), accessing services uniformly.
-   Scalability: Robust networks allow servers to handle increasing client demands.
-   Security: Centralized servers enhance security by controlling access and data flow.
:::
:::
:::

### There is a spectrum of choices for where to put most of the <br> interface logic and computation in a client server model {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

-   Pure client-side: The server merely serves static files. All the magic happens in Javascript, client-side. Example: Glimma

-   Microservices with Stateless RESTful API: The server does the heavy lifting, such as accessing large databases, but doesn't keep track of sessions and state.

-   Stateful server: The server has a session for each client. It may run a separate process per session. Puts a lot of load in the server but is very flexible.

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="1" fig-align="center" height="60%" width="60%"}

### RStudio can be run over a server on your browser in addition to a <br> local desktop application {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
-   RStudio Desktop is an R IDE that works with the version of R you have installed on your local Windows, Mac OS X, or Linux workstation

-   RStudio Server is a stateful Linux server application that provides a web interface to the version of R running on the server
:::

::: r-stack
![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="1" fig-align="center" height="100%" width="100%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="100%" width="100%"}
:::
:::

::: {.column width="50%"}
::: {.fragment fragment-index="4"}
RStudio Server is preferred over RStudio Desktop when:

-   You want to use R without installing it on your local workstation
-   You need more resources (e.g. CPU, memory) than is available on your workstation

In an enterprise setting, RStudio Server is preferred:

-   Access control to data and applications is centralized
-   R environment is standardized across the team(s)
:::
:::
:::

### Shiny Apps can be deployed to Shiny Servers {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

-   Shiny is an R package that makes it easy to build interactive web applications (apps) straight from R
-   A Shiny app is a web page (ui) connected to a computer running a stateful live R session (server)

::: r-stack
![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="70%" width="70%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="3" fig-align="center" height="200%" width="200%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="4" fig-align="center" height="200%" width="200%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="5" fig-align="center" height="200%" width="200%"}
:::

### The OpenCPU server exposes a simple but powerful HTTP api for RPC and data interchange with R {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
-   A system for embedded scientific computing and reproducible research with R

-   Provides a reliable and scalable foundation for statistical services or building R web applications

-   The OpenCPU server runs either as a single-user development server within the interactive R session, or as a multi-user Linux stack based on Apache2

-   allows concurrent execution of R code using the standard R interpreter (GNU R)

-   The entire system is fully open source and permissively licensed

-   A test page is avaible to explore the API features
:::
:::

::: {.column width="50%"}
::: {.fragment fragment-index="2"}
![](ResearchTopics_files/img/placeholder.png){.fragment fragment-index="2" fig-align="center" height="100%" width="100%"}
:::
:::
:::

### The OpenCPU test page allow us to simulate the API for RESTful and remote procedure calls with R {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: r-stack
![](ResearchTopics_files/img/placeholder.png){.fragment fig-align="center" height="150%" width="150%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fig-align="center" height="220%" width="220%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fig-align="center" height="220%" width="220%"}

![](ResearchTopics_files/img/placeholder.png){.fragment fig-align="center" height="120%" width="120%"}
:::

### The OpenCPU API is well-documented {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

<iframe src="https://www.opencpu.org/api.html#api-root" width="1800px" height="900px">

</iframe>

# ACCOMPLISHMENTS {data-background="ResearchTopics_files/img/topic-slide.png" transition="fade-in slide-out" transition-speed="slow"}

## Research Objectives {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

::: panel-tabset
### Primary

-   Deploy RStudio server, Shiny Server and OpenCPU server in same instance

-   Create bioinformatics wrappers, functions, tools, widgets or pipelines with an API using OpenCPU server

-   Create your ow R packages for the R functions and wrappers

-   Utilize various project management platforms and tools

### Secondary

-   Deploy the servers using docker or other container technologies

-   Create dashboard/s using Shiny and other interactive reactive frameworks in R

-   Create unit tests for the functions and API calls in the self-authored R packages and publish in Github

-   Deploy a CI/CD infrastructure with Github webhooks
:::

## Presentation Output {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

As a minimum, HTML slides output (Rmarkdown) with interactive graphs :)

<iframe src="ResearchTopics_files/3d-umap-7.html" width="1800px" height="800px">

</iframe>

## Project Management {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

-   Trello Kanban Boards will be used to track project progress

-   Burndown Charts will be used to track completed tasks

-   Github for source code management

# CHALLENGES {data-background="ResearchTopics_files/img/topic-slide.png" transition="fade-in slide-out" transition-speed="slow"}

# FOR NEXT WEEK {data-background="ResearchTopics_files/img/topic-slide.png" transition="fade-in slide-out" transition-speed="slow"}

# REFERENCES {data-background="ResearchTopics_files/img/topic-slide.png" transition="fade-in slide-out" transition-speed="slow"}

## REFERENCES {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

-   Journal Articles:

    -   <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9148156/>

-   Web Articles:

    -   <https://pmirla.github.io/archive/opencpu/index.html>
    -   <https://www.bioconductor.org/packages/release/workflows/vignettes/sequencing/inst/doc/sequencing.html>

## REFERENCES {data-background="ResearchTopics_files/img/subtopic-slide-2-1.png" transition="fade-in slide-out" transition-speed="slow"}

-   Image Sources:

    -   <https://revolution-computing.typepad.com/.a/6a010534b1db25970b01bb086253c2970d-500wi>
    -   <https://support.posit.co/hc/en-us/article_attachments/208601268/Screen_Shot_2016-06-22_at_4.27.16_PM.png>
    -   <https://support.posit.co/hc/en-us/article_attachments/208601268/Screen_Shot_2016-06-22_at_4.27.16_PM.png>
    -   <https://techcommunity.microsoft.com/t5/image/serverpage/image-id/98385i87A1535FA614E70C>
    -   <https://techcommunity.microsoft.com/t5/image/serverpage/image-id/98386iF5E95F1277EB1680>
